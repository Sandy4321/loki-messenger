name: Loki Messenger Release Build

on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    env:
      SIGNAL_ENV: production
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v1
      # Cache is too big (>400Mb) for github
      # - name: Cache node modules
      #   uses: actions/cache@v1
      #   with:
      #     path: node_modules
      #     key: ${{ runner.OS }}-npm-${{ hashFiles('yarn.lock') }}
      # - name: Install apt packages
      #   run: sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgconf-2-4 libasound2 libxtst6 libxss1 libnss3 xvfb hunspell-en-us
      # TODO: get this to detect .nvmrc
      - name: Set up node using nvm
        uses: dcodeIO/setup-node-nvm@v2.0.0
        with:
          node-version: 10.13
      - name: Install yarn
        run: npm install yarn --no-save
      - name: Install Dependencies
        run: yarn install --frozen-lockfile
      - name: Generate and concat files
        run: yarn generate
      # - name: Run Tests
      #   env:
      #     DISPLAY: 9.0
      #     LC_ALL: en_US
      #   run: |
      #     Xvfb -ac -screen scrn 1280x2000x24 :9.0 &
      #     yarn test
      - name: Lint Files
        run: yarn lint
      - name: Build Production Binaries
        run: $(yarn bin)/electron-builder --config.extraMetadata.environment=$SIGNAL_ENV --config.mac.bundleVersion='${{ github.ref }}' --publish=never --config.directories.output=release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: release
          asset_name: ${{ runner.OS }}-${{ github.ref }}
